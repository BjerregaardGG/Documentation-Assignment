export const noter = [
    { titel: "Import & Export HTML", deklerationer: [
        { dek: "Navngivet Import & Export", billede: "lektion_5/images/noDefault.png", beskrivelse: `Når vi anvender exports som vi navngiver, så skal vi også bruge samme navne når vi importerer, i modsætning til 'default export'. Foruden dette, så anvender vi os også af curly brackets { }, hvor vi specificerer hvilke funktioner eller objekter, som vi gerne vil importere. Når vi importerer, så vil node by default udfylde vores import 'path' og det er her vigtigt, at vi husker at tilføje: '.js' til slutningen af path, da dette ikke sker automatisk. `}, 
        { dek: "Default Import & Export", billede: "lektion_5/images/default.png", beskrivelse: `I default import og exports, så anvender vi os af 'default' keywordet, når vi specificerer, hvilke funktioner og objekter vi gerne vil eksportere. Når vi så importerer, så er navngivningen faktisk ligegyldig, hvilket kan ses i nedenstående eksempel.`},
        { dek: "ES Moduler", billede: "lektion_5/images/scriptES.png", beskrivelse: `Både 'named/navngivet' og 'default' exports er en del af ES moduler og det betyder, at vi skal specificere: type: 'module' i vores script tag i HTML, for at kunne anvende dem.`}],
        beskrivelse: "" },
    { titel: "Import & Export Node.js", billede: "", deklerationer: [
        { dek: "CommonJS", billede: "lektion_5/images/commonjs.png", beskrivelse: `Når vi anvender import og export med commonJS, så bruger vi keyword require, hvilket vi eksempelvis gør i vores server app.js fil når vi importerer 'Express'. Foruden det så, hvis vi laver vores egne funktioner og objekter, så skal vi også anvende os af 'module.exports' i den fil vi eksporterer fra.`}, 
        { dek: "ES moduler", billede: "lektion_5/images/esmodules_nodejs.png", beskrivelse: `Anvender vi ES moduler til at importere og eksportere i Node.js, så er det præcis samme tilgang som med HTML. Dette er også en af fordelene, da vi bruger samme syntax som i browseren. Med denne tilgang ser vi også præcis, hvad vi importerer i modsætning til commonJS. `},
        { dek: "Specificering af ES moduler i package.json", billede: "lektion_5/images/package_json_module.png", beskrivelse: `Når vi arbejder med import og export i HTML, så specificerer vi som sagt 'type: module' i vores script tag. Når vi ikke arbejder med commonJS, men derimod ES moduler i Node.js, så skal vi også specificere 'type: module', hvilket vi her gør i vores package.json fil.`}],
        beskrivelse: "" },
    { titel: "Serving static files", billede: "lektion_5/images/static.png", beskrivelse: "Vi vil generelt ikke have, at vore backend logik bliver tilgængeligt hos klienten. Derfor er det en mere sikker tilgang, at have en mappe, hvor vores klient filer er placeret. Denne mappe kan indeholde vores html, css, js scripts og billeder, som browseren skal have adgang til. Gennem anvendelse af: app.use(express.static('public')), så kan vi i Express bestemme hvilken mappe vi gerne vil 'serve' til vores klient, hvilket i dette tilfælde er 'public' mappen. " },
    { titel: "Approaches to redirection", billede: "", deklerationer: [
        { dek: "Client-side redirection", billede: "lektion_5/images/redirection_client.png", beskrivelse: "Client-side redirection træder i kraft efter at klienten har modtaget siden fra serveren. Der er altså ikke noget nyt kald til serveren, da alt sker i browseren enten gennem JS (window.location), anchor eller meta tags." },
        { dek: "Server-side redirection", billede: "lektion_5/images/redirection_server.png", beskrivelse: "Server-side redirection, i modsætning til client-side, træder i kraft inden siden sendes til klienten. Det er altså på serversiden, at det besluttes, hvilken side som klienten skal redirectes til." }],
         beskrivelse: "" },
]